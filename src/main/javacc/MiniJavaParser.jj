options {
  STATIC = false;
  JAVA_UNICODE_ESCAPE = true;
  DEBUG_PARSER = false;
}

/******************************************************************************/
/* PARSER CODE                                                                */
/******************************************************************************/
PARSER_BEGIN(MiniJavaParser)
    package de.keine_arme_keine_kekse.parser;

    import de.keine_arme_keine_kekse.syntaxtree.*;
    import de.keine_arme_keine_kekse.visitor.*;

    public class MiniJavaParser {

}
PARSER_END(MiniJavaParser)


/*******************************************************************************
 * LEXICAL SPECIFICATION
 **************************************************************************** */

/* =============================================================================
 * Definieren Sie hier alle zu ignorierenden Tokens
 * ========================================================================== */

SKIP : {
    /* WHITE SPACES */
    < WHITESPACE: (" " | "\n") >  // DIESE DEFINITION ERGÃ„NZEN !!!

    /* COMMENTS */
    | < BLOCK_COMMENT : "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
    | < LINE_COMMENT : "//" (~["\n"])* "\n" >
}


/* =============================================================================
 * Definieren Sie hier alle MiniJava-Tokens.
/*============================================================================*/
TOKEN : {
    // < LETTER: ~[] >  // DIESE ZEILE ENTFERNEN !!!

    /* RESERVED WORDS */

      < CLASS : "class" >
    | < PUBLIC : "public" >
    | < STATIC : "static" >
    | < VOID : "void" >
    | < EXTENDS : "extends" >
    | < RETURN : "return" >
    | < INT : "int" >
    | < INT_ARRAY : "int[]" >
    | < BOOLEAN : "boolean" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < WHILE : "while" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < THIS : "this" >
    | < NEW : "new" >
    | < MAIN : "main" >
    | < LENGTH : "length" >

    | < STRING : "String" >

    /* INTEGERS */
    | < #DIGIT : ["0"-"9"] >
    | < INTEGER_LITERAL : (<DIGIT>)+ >

    /* IDENTIFIERS */
    | < #LETTER : ["a"-"z","A"-"Z"] >
    | < IDENTIFIER_LITERAL : <LETTER>(<DIGIT>|<LETTER>)* >

    /* SEPARATORS */
    | < L_PAREN : "(" >
    | < R_PAREN : ")" >
    | < L_BRACE : "{" >
    | < R_BRACE : "}" >
    | < L_BRACKET : "[" >
    | < R_BRACKET : "]" >
    | < SEMI : ";" >
    | < COMMA : "," >
    | < DOT : "." >

    /* OPERATORS */
    | < PLUS : "+" >
    | < MINUS : "-" >
    | < TIMES : "*" >
    | < DIV : "/" >
    | < NOT : "!" >
    | < AND : "&&" >
    | < EQ : "=" >
    | < LESS_THAN : "<" >
}

/*******************************************************************************
 * SYNTACTICAL SPECIFICATION
 **************************************************************************** */

Identifier Identifier() : {
    Token lexem;
}{
    lexem=<IDENTIFIER_LITERAL>
    { return new Identifier(lexem.toString()); }
}

IntegerLiteral IntegerLiteral() : {
    Token lexem;
}{
    lexem=<INTEGER_LITERAL>
    { return new IntegerLiteral(Integer.parseInt(lexem.toString())); }
}

MainClass MainClass() : {
    Identifier classId;
    Identifier formalId;
    Statement statement;
}{
    <CLASS> classId=Identifier() <L_BRACE> <PUBLIC> <STATIC> <VOID> <MAIN> <L_PAREN> <STRING> <L_BRACKET> <R_BRACKET> formalId=Identifier() <R_PAREN> <L_BRACE> statement=Statement() <R_BRACE> <R_BRACE>
    {
        return new MainClass(classId, formalId, statement);
    }
}

void ClassDeclSimple(ClassDeclList list) : {
    Identifier classId;
    Identifier parentId=null;
    VarDeclList varList;
    MethodDeclList methodList;
}{
    <CLASS> (classId=Identifier()) (<EXTENDS> parentId=Identifier())? <L_BRACE> varList=VarDeclList() methodList=MethodDeclList() <R_BRACE>
    {
        if(parentId != null) {
        list.addElement(new ClassDeclExtends(classId, parentId, varList, methodList));
        return;
        }
        list.addElement(new ClassDeclSimple(classId,varList,methodList));
    }
}

Typing Typing() : {
    Token lexem = null;
} {
    <INT> { return new IntegerTyping(); }
    | <INT_ARRAY> { return new IntArrayTyping(); }
    | <BOOLEAN> { return new BooleanTyping(); }
    | lexem=<IDENTIFIER_LITERAL> { return new IdentifierTyping(lexem.toString()); }
}

MethodDeclList MethodDeclList(): {
    MethodDecl declaration;
    MethodDeclList list = new MethodDeclList();
} {
    (declaration=MethodDecl(){list.addElement(declaration);})*
    {
        return list;
    }
}

VarDeclList VarDeclList(): {
    VarDecl declaration;
    VarDeclList list = new VarDeclList();
}{
    (declaration=VarDecl(){list.addElement(declaration);})*
    {
        return list;
    }
}

VarDecl VarDecl() : {
    Typing type;
    Identifier id;
}{
    type=Typing() id=Identifier() <SEMI>
    {
        return new VarDecl(type, id);
    }
}


MethodDecl MethodDecl(): {
    Typing returnType;
    Identifier methodName;
    FormalList formalList = new FormalList();
    Token lexem = null;

    
    VarDeclList varDeclList = new VarDeclList();
    VarDecl varDeclaration = null;
    Typing varDeclarationType = null;
    Identifier varDeclarationId = null;
    
    StatementList statementList = new StatementList();
    Statement statement = null;
    Exp returnExpression = null;
} {
    <PUBLIC> returnType=Typing() methodName=Identifier() <L_PAREN> (formalList=FormalList())? <R_PAREN> <L_BRACE> 
    

    (
        (
            (
                <INT> { varDeclarationType = new IntegerTyping(); }
                | <INT_ARRAY> { varDeclarationType = new IntArrayTyping(); }
                | <BOOLEAN> { varDeclarationType = new BooleanTyping(); }
            )
            
            varDeclarationId=Identifier() <SEMI> {
                varDeclaration = new VarDecl(varDeclarationType, varDeclarationId);
                varDeclList.addElement(varDeclaration);
                if (statementList.size() != 0) {
                    throw new ParseException("Got var decl after statements :(");
                }
            }
        )
        |
        (
            lexem=<IDENTIFIER_LITERAL>
            (
                varDeclarationId=Identifier() <SEMI> { 
                    varDeclarationType = new IdentifierTyping(lexem.toString());
                    varDeclaration = new VarDecl(varDeclarationType, varDeclarationId);
                    varDeclList.addElement(varDeclaration);
                }
                | <EQ> statement=AssignStatementRest(new Identifier(lexem.toString())) {
                    statementList.addElement(statement);
                }
                | <L_BRACKET> statement=ArrayAssignRest(new Identifier(lexem.toString())) {
                    statementList.addElement(statement);
                }
            )
        )
    )*

    (statement=Statement() { statementList.addElement(statement); })*
    // varDeclList=VarDeclList()
    
    
    // statementList=StatementList()
    
    <RETURN> returnExpression=Expression() <SEMI> <R_BRACE>
    {
        return new MethodDecl(returnType, methodName, formalList, varDeclList, statementList, returnExpression);
    }
}

FormalList FormalList() : {
    FormalList list = new FormalList();
} {
    Formal(list) ("," Formal(list))*
    {
        return list;
    }
}

void Formal(FormalList list) : {
    Typing type;
    Identifier name;
} {
    type=Typing() name=Identifier()
    {
        list.addElement(new Formal(type, name));
    }
}

ExpList ExpList() : {
    Exp exp;
    ExpList list = new ExpList();
} {
    (exp=Expression(){list.addElement(exp);} (<COMMA> exp=Expression(){list.addElement(exp);})*)
    {
        return list;
    }
    |
    {
        return list;
    }
}

Exp BinaryExpression(Exp first) : {
  Exp second;

  Exp array = null;
  Exp index = null;

  Exp object = null;
  Identifier methodId = null;
  ExpList expList = null;
  Identifier id = null;

  Exp size = null;

  Exp exp = null;
}{
    <AND> second=Expression()
    {
        return new And(first, second);
    }
    |
    <LESS_THAN> second=Expression()
    {
        return new LessThan(first, second);
    }
    |
    <PLUS> second=Expression()
    {
        return new Plus(first, second);
    }
    |
    <MINUS> second=Expression()
    {
        return new Minus(first, second);
    }
    |
    <TIMES> second=Expression()
    {
        return new Times(first, second);
    }
    |
    <L_BRACKET> second=Expression() <R_BRACKET>
    {
        return new ArrayLookup(first, second);
    }
    |
    ""
    {
        return exp;
    }
}

Exp UnaryExpression() : {
    Exp exp = null;
    Identifier id;
    Token intLexem = null;
    Token idLexem = null;
    Identifier methodId;
    ExpList expList;
}{
    (
        <FALSE>{ exp=new False(); }
        | <TRUE> { exp=new True(); }
        | <NOT> exp=Expression() { exp = new Not(exp); }
        | <L_PAREN> exp=Expression() <R_PAREN> {}
        | <THIS> { return new This(); }
        | (
        <NEW>
            ( id=Identifier() <L_PAREN> <R_PAREN> ) { exp = new NewObject(id); }
            | ( <INT> <L_BRACKET> exp=Expression() <R_BRACKET> ) { exp = new NewArray(exp); }
        )
        | idLexem=<IDENTIFIER_LITERAL> { exp =  new IdentifierExp(idLexem.toString()); }
        | exp=IntegerLiteral() { }
    )
    [
        <DOT>(
            <LENGTH> {
                return new ArrayLength(exp);
            }
            |
            methodId=Identifier() <L_PAREN> expList=ExpList() <R_PAREN>
            {
                return new Call(exp, methodId, expList);
            }
        )
    ]
    {return exp;}
}

Exp Expression() : {
    Exp exp = null;
}{
    exp=UnaryExpression()
    [
      (exp=BinaryExpression(exp))
    ]
    {return exp;}
}

Statement Statement() : {
    Statement statement = null;
}{
    statement=Block()
    {
        return statement;
    }
    |
    statement=If()
    {
        return statement;
    }
    |
    statement=While()
    {
        return statement;
    }
    |
    statement=Print()
    {
        return statement;
    }
    |
    statement=AssignStatement()
    {
        return statement;
    }
}

Block Block() : {
  StatementList statementList = null;
}{
    <L_BRACE> statementList=StatementList() <R_BRACE>
    {
        return new Block(statementList);
    }
}

StatementList StatementList() : {
    Statement statement;
    StatementList list = new StatementList();
}{
    (statement=Statement(){list.addElement(statement);})*
    {
        return list;
    }
}

If If() : {
    Exp exp = null;
    Statement thenStatement = null;
    Statement elseStatement = null;
}{
    <IF> <L_PAREN> exp=Expression() <R_PAREN> thenStatement=Statement() <ELSE> elseStatement=Statement()
    {
        return new If(exp, thenStatement, elseStatement);
    }
}

While While() : {
    Exp exp = null;
    Statement statement = null;
}{
    <WHILE> <L_PAREN> exp=Expression() <R_PAREN> statement=Statement()
    {
        return new While(exp, statement);
    }
}

Print Print() : {
    Exp exp = null;
}{
    "System.out.println" <L_PAREN> exp=Expression() <R_PAREN> <SEMI>
    {
        return new Print(exp);
    }
}

Statement AssignStatementRest(Identifier id) : {
    Exp exp = null;
}{
    exp=Expression() <SEMI>
    {
        return new Assign(id, exp);
    }
}

ArrayAssign ArrayAssignRest(Identifier id) : {
    Exp index = null;
    Exp exp = null;
}{
    index=Expression() <R_BRACKET> <EQ> exp=Expression() <SEMI>
    {
        return new ArrayAssign(id, index, exp);
    }
}

Statement AssignStatement() : {
    Identifier id = null;
    Exp exp = null;
    Exp index = null;
}{
    id=Identifier()
    (
      <EQ> exp=Expression() <SEMI>
    ) {
        return new Assign(id, exp);
    }
    |
    (
      <L_BRACKET> index=Expression() <R_BRACKET> <EQ> exp=Expression() <SEMI>
    ) {
        return new ArrayAssign(id, index, exp);
    }
}

ClassDeclList ClassDeclList() : {
    ClassDeclList list = new ClassDeclList();
}{
    (ClassDeclSimple(list))*
    {
        return list;
    }
}

Program Program() : {
    MainClass mainClass;
    ClassDeclList classes;
}{
    mainClass=MainClass()
    classes=ClassDeclList()
    <EOF>
    {
        return new Program(mainClass, classes);
    }
}
