options {
  STATIC = false;
  JAVA_UNICODE_ESCAPE = true;
  DEBUG_PARSER = false;
}

/******************************************************************************/
/* PARSER CODE                                                                */
/******************************************************************************/
PARSER_BEGIN(MiniJavaParser)
    package de.keine_arme_keine_kekse.parser;

    import de.keine_arme_keine_kekse.syntaxtree.*;

    public class MiniJavaParser {

}
PARSER_END(MiniJavaParser)


/*******************************************************************************
 * LEXICAL SPECIFICATION
 **************************************************************************** */

/* =============================================================================
 * Definieren Sie hier alle zu ignorierenden Tokens                        
 * ========================================================================== */

SKIP : {
    /* WHITE SPACES */
    < WHITESPACE: (" " | "\n") >  // DIESE DEFINITION ERGÃ„NZEN !!!

    /* COMMENTS */
}


/* =============================================================================
 * Definieren Sie hier alle MiniJava-Tokens. 
/*============================================================================*/
TOKEN : {
    // < LETTER: ~[] >  // DIESE ZEILE ENTFERNEN !!!

    /* RESERVED WORDS */

      < CLASS : "class" >
    | < PUBLIC : "public" >
    | < STATIC : "static" >
    | < VOID : "void" >
    | < EXTENDS : "extends" >
    | < RETURN : "return" >
    | < INT : "int" >
    | < BOOLEAN : "boolean" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < WHILE : "while" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < THIS : "this" >
    | < NEW : "new" >
    | < MAIN : "main" >

    | < STRING : "String" >
    
    /* INTEGERS */

    /* IDENTIFIERS */

    /* SEPARATORS */
    | < L_PAREN : "(" >
    | < R_PAREN : ")" >
    | < L_BRACE : "{" >
    | < R_BRACE : "}" >
    | < L_BRACKET : "[" >
    | < R_BRACKET : "]" >

    /* OPERATORS */
}

/*******************************************************************************
 * SYNTACTICAL SPECIFICATION
 **************************************************************************** */

Identifier Identifier() : {}{
    "THIS" { return null; }
}

MainClass MainClass() : {
    Identifier classId;
    Identifier formalId;
    Statement statement;
}{
    "class" classId=Identifier() "{" "public" "static" "void" "main" "(" "String" "[" "]" formalId=Identifier() ")" "{" statement=Statement() "}" "}"
    {
        return new MainClass(classId, formalId, statement);
    }
}

void ClassDeclSimple(ClassDeclList list) : {
    Identifier classId;
    Identifier parentId=null;
    VarDeclList varList;
    MethodDeclList methodList;
}{
    "class" (classId=Identifier()) ("extends" parentId=Identifier())? "{" varList=VarDeclList() methodList=MethodDeclList() "}"
    {
        if(parentId != null) {
        list.addElement(new ClassDeclExtends(classId, parentId, varList, methodList));
        return;
        }
        list.addElement(new ClassDeclSimple(classId,varList,methodList));
    }
}

VarDeclList VarDeclList(): {

}{
    "THIS"
    {
        return null;
    }
}

MethodDeclList MethodDeclList(): {

} {
    "THIS"
    {
        return null;
    }
}

ClassDeclList ClassDeclList() : {
    ClassDeclList list = new ClassDeclList();
}{
    (ClassDeclSimple(list))*
    {
        return list;
    }
}

Statement Statement() : {}{
    "THIS" { return null; }
}

Program Program() : {
    MainClass mainClass;
    ClassDeclList classes; 
}{
    mainClass=MainClass()
    classes=ClassDeclList()
    { 
        return new Program(mainClass, classes); 
    }
}
